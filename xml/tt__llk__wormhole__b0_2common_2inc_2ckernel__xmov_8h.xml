<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="tt__llk__wormhole__b0_2common_2inc_2ckernel__xmov_8h" kind="file" language="C++">
    <compoundname>ckernel_xmov.h</compoundname>
    <includes refid="tt__llk__wormhole__b0_2common_2inc_2ckernel_8h" local="yes">ckernel.h</includes>
    <incdepgraph>
      <node id="1">
        <label>tt_llk_wormhole_b0/common/inc/ckernel_xmov.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__xmov_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cfg_defines.h</label>
      </node>
      <node id="16">
        <label>fw_debug.h</label>
      </node>
      <node id="8">
        <label>ckernel_addrmod.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__addrmod_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>ckernel_instr_params.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__instr__params_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>llk_defs.h</label>
      </node>
      <node id="4">
        <label>tensix.h</label>
      </node>
      <node id="2">
        <label>ckernel.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ckernel_gpr_map.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__gpr__map_8h"/>
      </node>
      <node id="11">
        <label>ckernel_defs.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__defs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tensix_types.h</label>
      </node>
      <node id="5">
        <label>risc_attribs.h</label>
      </node>
      <node id="15">
        <label>ckernel_structs.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__structs_8h"/>
      </node>
      <node id="7">
        <label>ckernel_include.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__include_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ckernel_ops.h</label>
        <link refid="tt__llk__wormhole__b0_2common_2inc_2ckernel__ops_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="structckernel_1_1risc__compact__mov__instrn__t" prot="public">ckernel::risc_compact_mov_instrn_t</innerclass>
    <innerclass refid="unionckernel_1_1risc__compact__mov__instrn__u" prot="public">ckernel::risc_compact_mov_instrn_u</innerclass>
    <innernamespace refid="namespaceckernel">ckernel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>Â©<sp/>2025<sp/>Tenstorrent<sp/>AI<sp/>ULC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tt__llk__wormhole__b0_2common_2inc_2ckernel_8h" kindref="compound">ckernel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XMOV<sp/>programming<sp/>through<sp/>C<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceckernel" kindref="compound">ckernel</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>instrn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_offset_addr<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_addr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>xfer_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>xfer_dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>0<sp/>-<sp/>l1-&gt;cfgreg,<sp/>1<sp/>-<sp/>l1-&gt;l1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>no_params<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>0<sp/>-<sp/>use<sp/>xmov<sp/>inputs<sp/>from<sp/>param<sp/>registers,<sp/>1<sp/>-<sp/>compact<sp/>move.<sp/>all<sp/>inputs<sp/>are<sp/>embedded<sp/>into<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/>risc_compact_mov_instrn_t;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_compact_mov_instrn_t<sp/>f;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/>risc_compact_mov_instrn_u;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1af1aec2ebbd8b8d16ad48cc7e9c1a711c" kindref="member">xmov_set_base</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>l1_base_addr_16B)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*XMOV_L1_BASE<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_XMOV_L1_BASE_ADDR);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Program<sp/>mover<sp/>L1<sp/>base<sp/>to<sp/>the<sp/>command<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>XMOV_L1_BASE[0]<sp/>=<sp/>l1_base_addr_16B;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1a7bbec018a0e71fff2c3dadb9d5e0566f" kindref="member">xmov_cfg_instr_set</ref>(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_compact_mov_instrn_u<sp/>&amp;risc_mov_instrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>l1_offset_16B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>reg_addr32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>xfer_size<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.instrn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x40;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mov<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.src_offset_addr<sp/>=<sp/>l1_offset_16B;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>l1<sp/>address<sp/>is<sp/>src_offset_addr<sp/>+<sp/>RISCV_TDMA_REG_XMOV_L1_BASE_ADDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.dst_addr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceckernel_1acf49036456c8b82e2f21866c41fedbed" kindref="member">cfg_addr</ref>(reg_addr32)<sp/>&gt;&gt;<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>movcfg<sp/>address,<sp/>16B<sp/>aligned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.xfer_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>xfer_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transfer<sp/>size<sp/>in<sp/>16B<sp/>chunks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.xfer_dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>l1-&gt;cfgreg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.no_params<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compact<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1aa13b8d07f1692a749403bc61931f1785" kindref="member">xmov_cfg_instr_program</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>risc_compact_mov_instrn_t<sp/>xmov,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>l1_offset_16B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>reg_addr32)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Program<sp/>tile<sp/>descriptor<sp/>using<sp/>fast<sp/>XMOV<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*XMOV_CMD<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_COMMAND_ADDR);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_compact_mov_instrn_u<sp/>risc_mov_instrn;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>xmov;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.src_offset_addr<sp/>=<sp/>l1_offset_16B;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>l1<sp/>address<sp/>is<sp/>src_offset_addr<sp/>+<sp/>RISCV_TDMA_REG_XMOV_L1_BASE_ADDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.dst_addr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceckernel_1acf49036456c8b82e2f21866c41fedbed" kindref="member">cfg_addr</ref>(reg_addr32)<sp/>&gt;&gt;<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>movcfg<sp/>address,<sp/>16B<sp/>aligned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>XMOV_CMD[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>risc_mov_instrn.val;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1aba7186deb2ceaff298d0c4448658ce39" kindref="member">xmov_cfg_program</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>l1_offset_16B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>reg_addr32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>xfer_size<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*XMOV_CMD<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_COMMAND_ADDR);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Program<sp/>tile<sp/>descriptor<sp/>using<sp/>fast<sp/>XMOV<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_compact_mov_instrn_u<sp/>risc_mov_instrn;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceckernel_1a7bbec018a0e71fff2c3dadb9d5e0566f" kindref="member">xmov_cfg_instr_set</ref>(risc_mov_instrn,<sp/>l1_offset_16B,<sp/>reg_addr32,<sp/>xfer_size);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>XMOV_CMD[0]<sp/>=<sp/>risc_mov_instrn.val;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1a90cceb86c0f0d243be14c8bab3675725" kindref="member">xmov_l1_to_l1_non_compact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>src_addr_16B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>dst_addr_16B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>xfer_size_16B<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*XMOV_CMD<sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_COMMAND_ADDR);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*SRC_ADDR<sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_XMOV_SRC_ADDR);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*DST_ADDR<sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_XMOV_DST_ADDR);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*SIZE_ADDR<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_XMOV_SIZE);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*DIR_ADDR<sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_XMOV_DIRECTION);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>SRC_ADDR[0]<sp/><sp/>=<sp/>src_addr_16B;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>DST_ADDR[0]<sp/><sp/>=<sp/>dst_addr_16B;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>SIZE_ADDR[0]<sp/>=<sp/>xfer_size_16B;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR_ADDR[0]<sp/><sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>L1<sp/>to<sp/>L1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_compact_mov_instrn_u<sp/>risc_mov_instrn;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.instrn<sp/><sp/><sp/><sp/>=<sp/>0x40;<sp/></highlight><highlight class="comment">//<sp/>mov<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>risc_mov_instrn.f.no_params<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>xmov<sp/>inputs<sp/>from<sp/>param<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>XMOV_CMD[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>risc_mov_instrn.val;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceckernel_1a110798c06d50d4be1983f8803e35aeb1" kindref="member">xmov_wait_till_idle</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint<sp/>*XMOV_STATUS<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(RISCV_TDMA_REG_STATUS);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XMOV_STATUS[0]<sp/>&amp;<sp/>0x1)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ckernel</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tt_llk_wormhole_b0/common/inc/ckernel_xmov.h"/>
  </compounddef>
</doxygen>
